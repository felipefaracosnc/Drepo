def packageName = "MyService"
def artifactname = "app-devops-artifact-ci.jar"
def version = "1.${BUILD_NUMBER}"
def semanticVersion = "1.${BUILD_NUMBER}.0"
def repoName = "riyapulusuganti/Drepo" // Ensure after forking update the repoName accrodingly.
def releasePipelineName = "CDRiyaScripted" //Ensure you enter the correct release pipeline name that you have created in Jenkins

pipeline {
	agent any
	
	tools {
		maven 'Maven'
	}

	environment {
		SCANNER_HOME = tool 'sonarScanner'
		VERACODE_APPLICATION_NAME = 'PetStoreAPI-Github' //Ensure you update the correct Application name
		VERACODE_SCANNER_NAME = 'Veracode'
	} 

	stages {

		stage('Build') {
			steps {
				//error("Force fail")
				sh 'mvn -B -DskipTests clean install'
			}
		}

		stage('Test') {
			steps {
			  	sh 'mvn test'
			}
			post {
				always {
					junit "**/target/surefire-reports/*.xml"
				}
			}
		}

		stage('Register Artifact') {
			steps {
				script {
					def artifactoryServer = Artifactory.server 'JFrog1'
					def artifactoryUploadSpec = """{
					                   "files": [{
					                      	"pattern": "${env.WORKSPACE}/target/DemoMavenProject.*.jar",
							      			"target": "felipe-repo/",
							     		 	"regexp": "true"
					                   }]
					                }"""
					def artifactoryBuildInfo = artifactoryServer.upload(artifactoryUploadSpec) 
					artifactoryServer.publishBuildInfo artifactoryBuildInfo
				}
				snDevOpsArtifact(artifactsPayload: """
				{
				"artifacts":
				[
				   {
				       "name": "${artifactname}",
				       "version": "${version}",
				       "semanticVersion": "${semanticVersion}",
				       "repositoryName": "${repoName}"
				   }
				]
				}""")
			}     
		}

		stage('Register Package') {
				steps {
					snDevOpsPackage(
					name: "${packageName}",
					artifactsPayload: """
					{
					    "artifacts":
					    [
						{
						    "name": "${artifactname}",
						    "version": "${version}",
						    "semanticVersion": "${semanticVersion}",
						    "repositoryName": "${repoName}"
						}
					    ]
					}""")
				}
		}

		// stage('Sonar Scan') {
		// 	steps {
		// 		sonarSummaries()
		// 	}
		// }

		// stage('Security Scan') {
		// 	steps {
		// 		echo "Running Security step ..."
		// 		snDevOpsSecurityResult securityResultAttributes: '{"scanner": "Veracode", "applicationName": "${env.VERACODE_APPLICATION_NAME}"}'
		// 	}
		// }
		
	}

}

def sonarSummaries() {
	withSonarQubeEnv('sonarcloud.io'){
	   if(fileExists("sonar-project.properties")) {
			sh '${SCANNER_HOME}/bin/sonar-scanner'
		} else {
			sh 'mvn clean verify sonar:sonar \
			    -Dsonar.login=1ff462f03228674e3a684569d716aad1aff286bb \
			    -Dsonar.host.url=https://sonarcloud.io \
			    -Dsonar.organization=riyapulusuganti \
			    -Dsonar.projectKey=riyapulusuganti_Demo'
		}
	}
}
